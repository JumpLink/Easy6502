<?xml version="1.0" encoding="UTF-8"?>
    <StackLayout xmlns="http://schemas.nativescript.org/tns.xsd" text-wrap="true"><HtmlView selectable="true" html="&lt;h2&gt;$memory map&lt;/h2&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;ul&gt;$ &lt;li&gt;&lt;strong&gt;zero page&lt;/strong&gt;: - (first 256 bytes, faster access)&lt;/li&gt; &lt;li&gt;&lt;strong&gt;stack&lt;/strong&gt;: -&lt;/li&gt; &lt;li&gt;&lt;strong&gt;display memory&lt;/strong&gt;: - (used for screen output)&lt;/li&gt; &lt;li&gt;&lt;strong&gt;program storage&lt;/strong&gt;: starting at &lt;/li&gt; &lt;/ul&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;h2&gt;$display organization&lt;/h2&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;ul&gt;$ &lt;li&gt;screen maps to memory range -&lt;/li&gt; &lt;li&gt;values - represent 16 different colors (=black, =white)&lt;/li&gt; &lt;li&gt;organized as four horizontal strips of 32Ã—8 pixels&lt;/li&gt; &lt;li&gt;first row: -, second row: -, etc.&lt;/li&gt; &lt;/ul&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;h3&gt;$color palette&lt;/h3&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;ul&gt;$ &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: black ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: white ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: red ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: cyan ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: purple ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: green ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: blue ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: yellow ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: orange ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: brown ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: light red ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: dark grey ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: grey ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: light green ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: light blue ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: light grey ()&lt;/li&gt; &lt;/ul&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;h2&gt;$registers&lt;/h2&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;ul&gt;$ &lt;li&gt;&lt;strong&gt;a&lt;/strong&gt; (accumulator): main register for calculations and data manipulation&lt;/li&gt; &lt;li&gt;&lt;strong&gt;x, y&lt;/strong&gt;: index registers for addressing and counting&lt;/li&gt; &lt;li&gt;&lt;strong&gt;sp&lt;/strong&gt; (stack pointer): points to current stack position (starts at )&lt;/li&gt; &lt;li&gt;&lt;strong&gt;pc&lt;/strong&gt; (program counter): points to the next instruction to execute&lt;/li&gt; &lt;/ul&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;h2&gt;$processor flags&lt;/h2&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;ul&gt;$ &lt;li&gt;&lt;strong&gt;n&lt;/strong&gt; (negative): set when bit 7 of result is set&lt;/li&gt; &lt;li&gt;&lt;strong&gt;v&lt;/strong&gt; (overflow): set when arithmetic operation causes signed overflow&lt;/li&gt; &lt;li&gt;&lt;strong&gt;b&lt;/strong&gt; (break): set when brk instruction is executed&lt;/li&gt; &lt;li&gt;&lt;strong&gt;d&lt;/strong&gt; (decimal): set when processor is in bcd (binary coded decimal) mode&lt;/li&gt; &lt;li&gt;&lt;strong&gt;i&lt;/strong&gt; (interrupt): set when interrupts are disabled&lt;/li&gt; &lt;li&gt;&lt;strong&gt;z&lt;/strong&gt; (zero): set when result is zero&lt;/li&gt; &lt;li&gt;&lt;strong&gt;c&lt;/strong&gt; (carry): set when arithmetic operations overflow a byte&lt;/li&gt; &lt;li&gt;used for conditional branching&lt;/li&gt; &lt;/ul&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;h2&gt;$addressing modes&lt;/h2&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;ul&gt;$ &lt;li&gt;&lt;strong&gt;immediate&lt;/strong&gt; (): use the actual value&lt;/li&gt; &lt;li&gt;&lt;strong&gt;zero page&lt;/strong&gt; (): access memory locations -&lt;/li&gt; &lt;li&gt;&lt;strong&gt;absolute&lt;/strong&gt; (): access any memory location&lt;/li&gt; &lt;li&gt;&lt;strong&gt;zero page,x/y&lt;/strong&gt; (): add x/y register to zero page address&lt;/li&gt; &lt;li&gt;&lt;strong&gt;absolute,x/y&lt;/strong&gt; (): add x/y register to absolute address&lt;/li&gt; &lt;li&gt;&lt;strong&gt;indirect&lt;/strong&gt; (): look up address stored at given location&lt;/li&gt; &lt;li&gt;&lt;strong&gt;indexed indirect&lt;/strong&gt; (): add x to zero page address, then dereference&lt;/li&gt; &lt;li&gt;&lt;strong&gt;indirect indexed&lt;/strong&gt; (): dereference zero page address, then add y&lt;/li&gt; &lt;/ul&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;h2&gt;$common instructions&lt;/h2&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;ul&gt;$ &lt;li&gt;&lt;strong&gt;lda/ldx/ldy&lt;/strong&gt;: load registers&lt;/li&gt; &lt;li&gt;&lt;strong&gt;sta/stx/sty&lt;/strong&gt;: store registers to memory&lt;/li&gt; &lt;li&gt;&lt;strong&gt;inx/iny/dex/dey&lt;/strong&gt;: increment/decrement registers&lt;/li&gt; &lt;li&gt;&lt;strong&gt;adc/sbc&lt;/strong&gt;: add/subtract with carry&lt;/li&gt; &lt;li&gt;&lt;strong&gt;jmp&lt;/strong&gt;: unconditional jump&lt;/li&gt; &lt;li&gt;&lt;strong&gt;jsr/rts&lt;/strong&gt;: jump to subroutine / return from subroutine&lt;/li&gt; &lt;li&gt;&lt;strong&gt;beq/bne/bcc/bcs&lt;/strong&gt;: branch if equal/not equal/carry clear/carry set&lt;/li&gt; &lt;li&gt;&lt;strong&gt;pha/pla&lt;/strong&gt;: push/pull accumulator to/from stack&lt;/li&gt; &lt;/ul&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;h2&gt;$special memory locations (in simulator)&lt;/h2&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;ul&gt;$ &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: random number generator (reads as a random value 0-255)&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: last pressed key (ascii code)&lt;/li&gt; &lt;/ul&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;p&gt;$&lt;strong&gt;directional controls&lt;/strong&gt;:&lt;/p&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;ul&gt;$ &lt;li&gt;&lt;strong&gt;w&lt;/strong&gt; or up arrow key ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;a&lt;/strong&gt; or left arrow key ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;s&lt;/strong&gt; or down arrow key ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;d&lt;/strong&gt; or right arrow key ()&lt;/li&gt; &lt;/ul&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;p&gt;$&lt;strong&gt;action buttons&lt;/strong&gt;:&lt;/p&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;ul&gt;$ &lt;li&gt;&lt;strong&gt;q&lt;/strong&gt; or enter/return key ()&lt;/li&gt; &lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; or space key ()&lt;/li&gt; &lt;/ul&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;h2&gt;$snake game memory usage&lt;/h2&gt;"></HtmlView>
<HtmlView selectable="true" html="&lt;ul&gt;$ &lt;li&gt;&lt;strong&gt;-&lt;/strong&gt;: apple position&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: snake direction (1=up, 2=right, 4=down, 8=left)&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;/strong&gt;: snake length&lt;/li&gt; &lt;li&gt;&lt;strong&gt;-&lt;/strong&gt;: snake position data (head, body segments, tail)&lt;/li&gt; &lt;/ul&gt;"></HtmlView></StackLayout>