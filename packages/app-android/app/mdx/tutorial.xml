<?xml version="1.0" encoding="UTF-8"?>
    <StackLayout xmlns="http://schemas.nativescript.org/tns.xsd" text-wrap="true"><Label text-wrap="true" font-size="24" font-weight="bold" margin-top="16" margin-bottom="8"><FormattedString>Tutorial <sub>by <Label text-wrap="true" margin-top="8" margin-bottom="8" href="https://www.skilldrick.co.uk/" text="nick morgan">Nick Morgan</Label>, licensed under CC BY 4.0</sub></FormattedString></Label>
<Label text-wrap="true" font-size="22" font-weight="bold" margin-top="16" margin-bottom="8" text="introduction">Introduction</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>In this tiny tutorial I&apos;m going to show you how to get started writing 6502
assembly language. The 6502 processor was massive in the seventies and
eighties, powering famous computers like the
<Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://en.wikipedia.org/wiki/bbc_micro" text="bbc micro">BBC Micro</Label>,
<Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://en.wikipedia.org/wiki/atari_2600" text="atari 2600">Atari 2600</Label>,
<Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://en.wikipedia.org/wiki/commodore_64" text="commodore 64">Commodore 64</Label>,
<Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://en.wikipedia.org/wiki/apple_ii" text="apple ii">Apple II</Label>, and the <Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://en.wikipedia.org/wiki/nintendo_entertainment_system" text="nintendo entertainment
system">Nintendo Entertainment
System</Label>. Bender in
Futurama <Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://www.transbyte.org/sid/sid-files/bender_6502.jpg" text="has a 6502 processor for a
brain">has a 6502 processor for a
brain</Label>. <Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://www.pagetable.com/docs/terminator/00-37-23.jpg" text="even the
terminator was programmed in
6502">Even the
Terminator was programmed in
6502</Label>.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>So, why would you want to learn 6502? It&apos;s a dead language isn&apos;t it? Well,
so&apos;s Latin. And they still teach that.
<Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://en.wikipedia.org/wiki/q.e.d." text="q.e.d.">Q.E.D.</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>(Actually, I&apos;ve been reliably informed that 6502 processors are still being
produced by <Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://www.westerndesigncenter.com/wdc/w65c02s-chip.cfm" text="western design center">Western Design Center</Label>
and <Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://www.mouser.co.uk/search/refine.aspx?keyword=65c02" text="sold to hobbyists">sold to hobbyists</Label>, so clearly 6502
<Label text-wrap="true" font-style="italic" text="isn&apos;t">isn&apos;t</Label> a dead language! Who knew?)</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Seriously though, I think it&apos;s valuable to have an understanding of assembly
language. Assembly language is the lowest level of abstraction in computers -
the point at which the code is still readable. Assembly language translates
directly to the bytes that are executed by your computer&apos;s processor.
If you understand how it works, you&apos;ve basically become a computer
<Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://skilldrick.co.uk/2011/04/magic-in-software-development/" text="magician">magician</Label>.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Then why 6502? Why not a <Label text-wrap="true" font-style="italic" text="useful">useful</Label> assembly language, like
<Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://en.wikipedia.org/wiki/x86" text="x86">x86</Label>? Well, I don&apos;t think learning x86 is
useful. I don&apos;t think you&apos;ll ever have to <Label text-wrap="true" font-style="italic" text="write">write</Label> assembly language in your day
job - this is purely an academic exercise, something to expand your mind and
your thinking. 6502 was originally written in a different age, a time when the majority of
developers were writing assembly directly, rather than in these new-fangled
high-level programming languages. So, it was designed to be written by humans.
More modern assembly languages are meant to written by compilers, so let&apos;s
leave it to them. Plus, 6502 is <Label text-wrap="true" font-style="italic" text="fun">fun</Label>. Nobody ever called x86 <Label text-wrap="true" font-style="italic" text="fun">fun</Label>.</FormattedString></Label>
<Label text-wrap="true" font-size="22" font-weight="bold" margin-top="16" margin-bottom="8" text="our first program">Our first program</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>So, let&apos;s dive in! This application contains a <Label text-wrap="true" margin-top="8" margin-bottom="8" href="https://github.com/skilldrick/6502js" text="java-script 6502 assembler and simulator">JavaScript 6502 Assembler and Simulator</Label> that I have adapted for this interactive tutorial.
Click the <Label text-wrap="true" font-weight="bold" text="copy">Copy</Label> button in the code block below to copy the example code to the editor.
Then click the button in the top right to assemble the code, then click it again to run the program.
You can also access these actions through the dropdown menu.</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:copyable" text="lda #$01
sta $0200
lda #$05
sta $0201
lda #$08
sta $0202
">LDA #$01
STA $0200
LDA #$05
STA $0201
LDA #$08
STA $0202
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="the black game console screen now should show three coloured &quot;pixels&quot; at the
top left.">The black game console screen now should show three coloured &quot;pixels&quot; at the
top left.</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>So, what&apos;s this program actually doing? Let&apos;s step through it. Hit <Label text-wrap="true" font-weight="bold" text="reset">Reset</Label>,
then select <Label text-wrap="true" font-weight="bold" text="step">Step</Label> from the dropdown menu. The button will switch to step mode,
allowing you to execute the program one instruction at a time.
Click once and you&apos;ll notice in the debugger that <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a=">A=</Label> changed from <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$00">$00</Label> to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label>, and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="pc=">PC=</Label> changed from <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0600">$0600</Label> to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0602">$0602</Label>.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Any numbers prefixed with <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$">$</Label> in 6502 assembly language (and by extension, in
this book) are in hexadecimal (hex) format. If you&apos;re not familiar with hex
numbers, I recommend you read <Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://en.wikipedia.org/wiki/hexadecimal" text="the wikipedia
article">the Wikipedia
article</Label>. Anything prefixed with <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="#">#</Label>
is a literal number value. Any other number refers to a memory location.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Equipped with that knowledge, you should be able to see that the instruction
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="lda #$01">LDA #$01</Label> loads the hex value <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label> into register <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label>. I&apos;ll go into more
detail on registers in the next section.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Press <Label text-wrap="true" font-weight="bold" text="step">Step</Label> again to execute the second instruction. The top-left pixel of
the game console should now be white. This simulator uses the memory
locations <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0200">$0200</Label> to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$05ff">$05ff</Label> to draw pixels on its display. The values <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$00">$00</Label> to
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0f">$0f</Label> represent 16 different colours (<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$00">$00</Label> is black and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label> is white), so
storing the value <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label> at memory location <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0200">$0200</Label> draws a white pixel at the
top left corner. This is simpler than how an actual computer would output
video, but it&apos;ll do for now.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>So, the instruction <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="sta $0200">STA $0200</Label> stores the value of the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label> register to memory
location <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0200">$0200</Label>. Click <Label text-wrap="true" font-weight="bold" text="step">Step</Label> four more times to execute the rest of the
instructions, keeping an eye on the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label> register as it changes.</FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8" text="exercises">Exercises</Label>
<StackLayout margin-top="8" margin-bottom="8" margin-left="16">
<Label text-wrap="true" margin-top="4" margin-bottom="4" text="try changing the colour of the three pixels.">Try changing the colour of the three pixels.</Label>
<Label text-wrap="true" margin-top="4" margin-bottom="4" text="• change one of the pixels to draw at the bottom-right corner (memory location ,[object object],)."><FormattedString>Change one of the pixels to draw at the bottom-right corner (memory location <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$05ff">$05ff</Label>).</FormattedString></Label>
<Label text-wrap="true" margin-top="4" margin-bottom="4" text="add more instructions to draw extra pixels.">Add more instructions to draw extra pixels.</Label>
</StackLayout>
<Label text-wrap="true" font-size="22" font-weight="bold" margin-top="16" margin-bottom="8" text="registers and flags">Registers and flags</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>We&apos;ve already had a little look at the processor status section (the bit with
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label>, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="pc">PC</Label> etc.), but what does it all mean?</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The first line shows the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label>, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="y">Y</Label> registers (<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label> is often called the
&quot;accumulator&quot;). Each register holds a single byte. Most operations work on the
contents of these registers.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="sp">SP</Label> is the stack pointer. I won&apos;t get into the stack yet, but basically this
register is decremented every time a byte is pushed onto the stack, and
incremented when a byte is popped off the stack.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="pc">PC</Label> is the program counter - it&apos;s how the processor knows at what point in the
program it currently is. It&apos;s like the current line number of an executing
script. In the JavaScript simulator the code is assembled starting at memory
location <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0600">$0600</Label>, so <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="pc">PC</Label> always starts there.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The last section shows the processor flags. Each flag is one bit, so all seven
flags live in a single byte. The flags are set by the processor to give
information about the previous instruction. More on that later. <Label text-wrap="true" margin-top="8" margin-bottom="8" href="https://web.archive.org/web/20210626024532/http://www.obelisk.me.uk/6502/registers.html" text="read more
about the registers and flags here">Read more
about the registers and flags here</Label>.</FormattedString></Label>
<Label text-wrap="true" font-size="22" font-weight="bold" margin-top="16" margin-bottom="8" text="instructions">Instructions</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="instructions in assembly language are like a small set of predefined functions.
all instructions take zero or one arguments. here&apos;s some annotated
source code to introduce a few different instructions:">Instructions in assembly language are like a small set of predefined functions.
All instructions take zero or one arguments. Here&apos;s some annotated
source code to introduce a few different instructions:</Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:copyable" text="lda #$c0  ;load the hex value $c0 into the a register
tax       ;transfer the value in the a register to x
inx       ;increment the value in the x register
adc #$c4  ;add the hex value $c4 to the a register
brk       ;break - we&apos;re done
">LDA #$c0  ;Load the hex value $c0 into the A register
TAX       ;Transfer the value in the A register to X
INX       ;Increment the value in the X register
ADC #$c4  ;Add the hex value $c4 to the A register
BRK       ;Break - we&apos;re done
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Assemble the code, then turn on the debugger and step through the code, watching
the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> registers. Something slightly odd happens on the line <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="adc #$c4">ADC #$c4</Label>.
You might expect that adding <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$c4">$c4</Label> to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$c0">$c0</Label> would give <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$184">$184</Label>, but this
processor gives the result as <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$84">$84</Label>. What&apos;s up with that?</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The problem is, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$184">$184</Label> is too big to fit in a single byte (the max is <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$ff">$FF</Label>),
and the registers can only hold a single byte.  It&apos;s OK though; the processor
isn&apos;t actually dumb. If you were looking carefully enough, you&apos;ll have noticed
that the carry flag was set to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="1">1</Label> after this operation. So that&apos;s how you
know.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>In the simulator below <Label text-wrap="true" font-weight="bold" text="type">type</Label> (don&apos;t paste) the following code:</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:readonly:unselectable" text="lda #$80
sta $01
adc $01
">LDA #$80
STA $01
ADC $01
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>An important thing to notice here is the distinction between <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="adc #$01">ADC #$01</Label> and
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="adc $01">ADC $01</Label>. The first one adds the value <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label> to the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label> register, but the
second adds the value stored at memory location <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label> to the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label> register.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Assemble the code and select <Label text-wrap="true" font-weight="bold" text="step">Step</Label> from the Run button&apos;s dropdown menu to step through these three
instructions. The monitor in the debugger shows a section of memory, and can be helpful to
visualise the execution of programs. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="sta $01">STA $01</Label> stores the value of the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label>
register at memory location <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label>, and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="adc $01">ADC $01</Label> adds the value stored at the
memory location <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label> to the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label> register. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$80 + $80">$80 + $80</Label> should equal <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$100">$100</Label>, but
because this is bigger than a byte, the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label> register is set to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$00">$00</Label> and the
carry flag is set. As well as this though, the zero flag is set. The zero flag
is set by all instructions where the result is zero.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>A full list of the 6502 instruction set is <Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://www.6502.org/tutorials/6502opcodes.html" text="available
here">available
here</Label> and
<Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://www.obelisk.me.uk/6502/reference.html" text="here">here</Label> (I usually refer to
both pages as they have their strengths and weaknesses). These pages detail the
arguments to each instruction, which registers they use, and which flags they
set. They are your bible.</FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8" text="exercises">Exercises</Label>
<StackLayout margin-top="8" margin-bottom="8" margin-left="16">
<Label text-wrap="true" margin-top="4" margin-bottom="4" text="• you&apos;ve seen ,[object object],. you can probably guess what ,[object object],, ,[object object], and ,[object object], do,
but write some code to test your assumptions."><FormattedString>You&apos;ve seen <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="tax">TAX</Label>. You can probably guess what <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="tay">TAY</Label>, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="txa">TXA</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="tya">TYA</Label> do,
but write some code to test your assumptions.</FormattedString></Label>
<Label text-wrap="true" margin-top="4" margin-bottom="4" text="• rewrite the first example in this section to use the ,[object object], register instead of
the ,[object object], register."><FormattedString>Rewrite the first example in this section to use the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="y">Y</Label> register instead of
the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> register.</FormattedString></Label>
<Label text-wrap="true" margin-top="4" margin-bottom="4" text="• the opposite of ,[object object], is ,[object object], (subtract with carry). write a program that
uses this instruction."><FormattedString>The opposite of <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="adc">ADC</Label> is <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="sbc">SBC</Label> (subtract with carry). Write a program that
uses this instruction.</FormattedString></Label>
</StackLayout>
<Label text-wrap="true" font-size="22" font-weight="bold" margin-top="16" margin-bottom="8" text="branching">Branching</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="so far we&apos;re only able to write basic programs without any branching logic.
let&apos;s change that.">So far we&apos;re only able to write basic programs without any branching logic.
Let&apos;s change that.</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>6502 assembly language has a bunch of branching instructions, all of which
branch based on whether certain flags are set or not. In this example we&apos;ll be
looking at <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="bne">BNE</Label>: &quot;Branch on not equal&quot;.</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:copyable" text="ldx #$08
decrement:
  dex
  stx $0200
  cpx #$03
  bne decrement
  stx $0201
  brk
">LDX #$08
decrement:
  DEX
  STX $0200
  CPX #$03
  BNE decrement
  STX $0201
  BRK
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>First we load the value <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$08">$08</Label> into the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> register. The next line is a label.
Labels just mark certain points in a program so we can return to them later.
After the label we decrement <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label>, store it to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0200">$0200</Label> (the top-left pixel), and
then compare it to the value <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$03">$03</Label>.
<Label text-wrap="true" margin-top="8" margin-bottom="8" href="http://www.obelisk.me.uk/6502/reference.html#cpx"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="cpx">CPX</Label></FormattedString></Label> compares the
value in the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> register with another value. If the two values are equal, the
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="z">Z</Label> flag is set to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="1">1</Label>, otherwise it is set to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="0">0</Label>.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The next line, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="bne decrement">BNE decrement</Label>, will shift execution to the decrement label if
the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="z">Z</Label> flag is set to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="0">0</Label> (meaning that the two values in the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="cpx">CPX</Label> comparison
were not equal), otherwise it does nothing and we store <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0201">$0201</Label>, then
finish the program.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="in assembly language, you&apos;ll usually use labels with branch instructions. when
assembled though, this label is converted to a single-byte relative offset (a
number of bytes to go backwards or forwards from the next instruction) so
branch instructions can only go forward and back around 256 bytes. this means
they can only be used to move around local code. for moving further you&apos;ll need
to use the jumping instructions.">In assembly language, you&apos;ll usually use labels with branch instructions. When
assembled though, this label is converted to a single-byte relative offset (a
number of bytes to go backwards or forwards from the next instruction) so
branch instructions can only go forward and back around 256 bytes. This means
they can only be used to move around local code. For moving further you&apos;ll need
to use the jumping instructions.</Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8" text="exercises">Exercises</Label>
<StackLayout margin-top="8" margin-bottom="8" margin-left="16">
<Label text-wrap="true" margin-top="4" margin-bottom="4" text="• the opposite of ,[object object], is ,[object object],. try writing a program that uses ,[object object],."><FormattedString>The opposite of <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="bne">BNE</Label> is <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="beq">BEQ</Label>. Try writing a program that uses <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="beq">BEQ</Label>.</FormattedString></Label>
<Label text-wrap="true" margin-top="4" margin-bottom="4" text="• [object object], and ,[object object], (&quot;branch on carry clear&quot; and &quot;branch on carry set&quot;) are used
to branch on the carry flag. write a program that uses one of these two."><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="bcc">BCC</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="bcs">BCS</Label> (&quot;branch on carry clear&quot; and &quot;branch on carry set&quot;) are used
to branch on the carry flag. Write a program that uses one of these two.</FormattedString></Label>
</StackLayout>
<Label text-wrap="true" font-size="22" font-weight="bold" margin-top="16" margin-bottom="8" text="addressing modes">Addressing modes</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The 6502 uses a 16-bit address bus, meaning that there are 65536 bytes of
memory available to the processor. Remember that a byte is represented by two
hex characters, so the memory locations are generally represented as <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0000 - $ffff">$0000 - $ffff</Label>. There are various ways to refer to these memory locations, as detailed below.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>With all these examples you might find it helpful to use the memory monitor in the debugger to
watch the memory change. The monitor takes a starting memory location and a
number of bytes to display from that location. Both of these are hex values.
For example, to display 16 bytes of memory from <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$c000">$c000</Label>, enter <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="c000">c000</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="10">10</Label>
into <Label text-wrap="true" font-weight="bold" text="start">Start</Label> and <Label text-wrap="true" font-weight="bold" text="length">Length</Label>, respectively.</FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8"><FormattedString>Absolute: <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$c000">$c000</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="with absolute addressing, the full memory location is used as the argument to the instruction. for example:">With absolute addressing, the full memory location is used as the argument to the instruction. For example:</Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:readonly" text="sta $c000 ;store the value in the accumulator at memory location $c000
">STA $c000 ;Store the value in the accumulator at memory location $c000
</Label></FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8"><FormattedString>Zero page: <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$c0">$c0</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="all instructions that support absolute addressing (with the exception of the jump
instructions) also have the option to take a single-byte address. this type of
addressing is called &quot;zero page&quot; - only the first page (the first 256 bytes) of
memory is accessible. this is faster, as only one byte needs to be looked up,
and takes up less space in the assembled code as well.">All instructions that support absolute addressing (with the exception of the jump
instructions) also have the option to take a single-byte address. This type of
addressing is called &quot;zero page&quot; - only the first page (the first 256 bytes) of
memory is accessible. This is faster, as only one byte needs to be looked up,
and takes up less space in the assembled code as well.</Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8"><FormattedString>Zero page,X: <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$c0,x">$c0,X</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>This is where addressing gets interesting. In this mode, a zero page address is given, and then the value of the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> register is added. Here is an example:</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:readonly" text="ldx #$01   ;x is $01
lda #$aa   ;a is $aa
sta $a0,x ;store the value of a at memory location $a1
inx        ;increment x
sta $a0,x ;store the value of a at memory location $a2
">LDX #$01   ;X is $01
LDA #$aa   ;A is $aa
STA $a0,X ;Store the value of A at memory location $a1
INX        ;Increment X
STA $a0,X ;Store the value of A at memory location $a2
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="if the result of the addition is larger than a single byte, the address wraps around. for example:">If the result of the addition is larger than a single byte, the address wraps around. For example:</Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:readonly" text="ldx #$05
sta $ff,x ;store the value of a at memory location $04
">LDX #$05
STA $ff,X ;Store the value of A at memory location $04
</Label></FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8"><FormattedString>Zero page,Y: <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$c0,y">$c0,Y</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>This is the equivalent of zero page,X, but can only be used with <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="ldx">LDX</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="stx">STX</Label>.</FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8"><FormattedString>Absolute,X and absolute,Y: <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$c000,x">$c000,X</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$c000,y">$c000,Y</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="these are the absolute addressing versions of zero page,x and zero page,y. for example:">These are the absolute addressing versions of zero page,X and zero page,Y. For example:</Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:readonly" text="ldx #$01
sta $0200,x ;store the value of a at memory location $0201
">LDX #$01
STA $0200,X ;Store the value of A at memory location $0201
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Unlike zero page,Y, absolute,Y can&apos;t be used with <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="stx">STX</Label> but can be used with <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="lda">LDA</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="sta">STA</Label>.</FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8"><FormattedString>Immediate: <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="#$c0">#$c0</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Immediate addressing doesn&apos;t strictly deal with memory addresses - this is the
mode where actual values are used. For example, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="ldx #$01">LDX #$01</Label> loads the value
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label> into the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> register. This is very different to the zero page
instruction <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="ldx $01">LDX $01</Label> which loads the value at memory location <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label> into the
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> register.</FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8"><FormattedString>Relative: <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$c0">$c0</Label> (or label)</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="relative addressing is used for branching instructions. these instructions take
a single byte, which is used as an offset from the following instruction.">Relative addressing is used for branching instructions. These instructions take
a single byte, which is used as an offset from the following instruction.</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="assemble the following code, then check the debugger to see the hexdump of the assembled code.">Assemble the following code, then check the debugger to see the hexdump of the assembled code.</Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:copyable" text="lda #$01
cmp #$02
bne notequal
sta $22
notequal:
  brk
">LDA #$01
CMP #$02
BNE notequal
STA $22
notequal:
  BRK
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="the hex should look something like this:">The hex should look something like this:</Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-hex:line-start=0x0600:readonly" text="a9 01 c9 02 d0 02 85 22 00
">a9 01 c9 02 d0 02 85 22 00
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a9">a9</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="c9">c9</Label> are the processor opcodes for immediate-addressed <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="lda">LDA</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="cmp">CMP</Label>
respectively. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="01">01</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="02">02</Label> are the arguments to these instructions. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="d0">d0</Label> is
the opcode for <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="bne">BNE</Label>, and its argument is <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="02">02</Label>. This means &quot;skip over the next
two bytes&quot; (<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="85 22">85 22</Label>, the assembled version of <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="sta $22">STA $22</Label>). Try editing the code
so <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="sta">STA</Label> takes a two-byte absolute address rather than a single-byte zero page
address (e.g. change <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="sta $22">STA $22</Label> to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="sta $2222">STA $2222</Label>). Reassemble the code and look at
the hexdump again - the argument to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="bne">BNE</Label> should now be <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="03">03</Label>, because the
instruction the processor is skipping past is now three bytes long.</FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8" text="implicit">Implicit</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Some instructions don&apos;t deal with memory locations (e.g. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="inx">INX</Label> - increment the
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> register). These are said to have implicit addressing - the argument is
implied by the instruction.</FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8"><FormattedString>Indirect: <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="($c000)">($c000)</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="indirect addressing uses an absolute address to look up another address. the
first address gives the least significant byte of the address, and the
following byte gives the most significant byte. that can be hard to wrap your
head around, so here&apos;s an example:">Indirect addressing uses an absolute address to look up another address. The
first address gives the least significant byte of the address, and the
following byte gives the most significant byte. That can be hard to wrap your
head around, so here&apos;s an example:</Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:copyable" text="lda #$01
sta $f0
lda #$cc
sta $f1
jmp ($00f0) ;dereferences to $cc01
">LDA #$01
STA $f0
LDA #$cc
STA $f1
JMP ($00f0) ;dereferences to $cc01
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>In this example, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$f0">$f0</Label> contains the value <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$f1">$f1</Label> contains the value
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$cc">$cc</Label>. The instruction <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="jmp ($f0)">JMP ($f0)</Label> causes the processor to look up the two
bytes at <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$f0">$f0</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$f1">$f1</Label> (<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$cc">$cc</Label>) and put them together to form the
address <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$cc01">$cc01</Label>, which becomes the new program counter. Assemble and step
through the program above to see what happens. I&apos;ll talk more about <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="jmp">JMP</Label> in
the section on <Label text-wrap="true" margin-top="8" margin-bottom="8" href="#jumping" text="jumping">Jumping</Label>.</FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8"><FormattedString>Indexed indirect: <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="($c0,x)">($c0,X)</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>This one&apos;s kinda weird. It&apos;s like a cross between zero page,X and indirect.
Basically, you take the zero page address, add the value of the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> register to
it, then use that to look up a two-byte address. For example:</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:copyable" text="ldx #$01
lda #$05
sta $01
lda #$07
sta $02
ldy #$0a
sty $0705
lda ($00,x)
">LDX #$01
LDA #$05
STA $01
LDA #$07
STA $02
LDY #$0a
STY $0705
LDA ($00,X)
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Memory locations <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$02">$02</Label> contain the values <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$05">$05</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$07">$07</Label>
respectively. Think of <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="($00,x)">($00,X)</Label> as <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="($00 + x)">($00 + X)</Label>. In this case <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> is <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label>, so
this simplifies to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="($01)">($01)</Label>. From here things proceed like standard indirect
addressing - the two bytes at <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$02">$02</Label> (<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$05">$05</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$07">$07</Label>) are looked up
to form the address <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0705">$0705</Label>.  This is the address that the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="y">Y</Label> register was
stored into in the previous instruction, so the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label> register gets the same
value as <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="y">Y</Label>, albeit through a much more circuitous route. You won&apos;t see this
much.</FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8"><FormattedString>Indirect indexed: <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="($c0),y">($c0),Y</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Indirect indexed is like indexed indirect but less insane. Instead of adding
the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> register to the address <Label text-wrap="true" font-style="italic" text="before">before</Label> dereferencing, the zero page address
is dereferenced, and the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="y">Y</Label> register is added to the resulting address.</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:copyable" text="ldy #$01
lda #$03
sta $01
lda #$07
sta $02
ldx #$0a
stx $0704
lda ($01),y
">LDY #$01
LDA #$03
STA $01
LDA #$07
STA $02
LDX #$0a
STX $0704
LDA ($01),Y
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>In this case, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="($01)">($01)</Label> looks up the two bytes at <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$02">$02</Label>: <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$03">$03</Label> and
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$07">$07</Label>. These form the address <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0703">$0703</Label>. The value of the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="y">Y</Label> register is added
to this address to give the final address <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0704">$0704</Label>.</FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8" text="exercise">Exercise</Label>
<StackLayout margin-top="8" margin-bottom="8" margin-left="16">
<Label text-wrap="true" margin-top="4" margin-bottom="4" text="try to write code snippets that use each of the 6502 addressing modes.
remember, you can use the monitor in the debugger to watch a section of memory.">Try to write code snippets that use each of the 6502 addressing modes.
Remember, you can use the monitor in the debugger to watch a section of memory.</Label>
</StackLayout>
<Label text-wrap="true" font-size="22" font-weight="bold" margin-top="16" margin-bottom="8" text="the stack">The stack</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The stack in a 6502 processor is just like any other stack - values are pushed
onto it and popped (&quot;pulled&quot; in 6502 parlance) off it. The current depth of the
stack is measured by the stack pointer, a special register. The stack lives in
memory between <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0100">$0100</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01ff">$01ff</Label>. The stack pointer is initially <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$ff">$ff</Label>, which
points to memory location <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01ff">$01ff</Label>. When a byte is pushed onto the stack, the
stack pointer becomes <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$fe">$fe</Label>, or memory location <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01fe">$01fe</Label>, and so on.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Two of the stack instructions are <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="pha">PHA</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="pla">PLA</Label>, &quot;push accumulator&quot; and &quot;pull
accumulator&quot;. Below is an example of these two in action.</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:copyable" text="ldx #$00
ldy #$00
firstloop:
  txa
  sta $0200,y
  pha
  inx
  iny
  cpy #$10
  bne firstloop ;loop until y is $10
secondloop:
  pla
  sta $0200,y
  iny
  cpy #$20      ;loop until y is $20
  bne secondloop
">LDX #$00
LDY #$00
firstloop:
  TXA
  STA $0200,Y
  PHA
  INX
  INY
  CPY #$10
  BNE firstloop ;loop until Y is $10
secondloop:
  PLA
  STA $0200,Y
  INY
  CPY #$20      ;loop until Y is $20
  BNE secondloop
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> holds the pixel colour, and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="y">Y</Label> holds the position of the current pixel.
The first loop draws the current colour as a pixel (via the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label> register),
pushes the colour to the stack, then increments the colour and position.  The
second loop pops the stack, draws the popped colour as a pixel, then increments
the position. As should be expected, this creates a mirrored pattern.</FormattedString></Label>
<Label text-wrap="true" font-size="22" font-weight="bold" margin-top="16" margin-bottom="8" text="jumping">Jumping</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="jumping is like branching with two main differences. first, jumps are not
conditionally executed, and second, they take a two-byte absolute address. for
small programs, this second detail isn&apos;t very important, as you&apos;ll mostly be
using labels, and the assembler works out the correct memory location from the
label. for larger programs though, jumping is the only way to move from one
section of the code to another.">Jumping is like branching with two main differences. First, jumps are not
conditionally executed, and second, they take a two-byte absolute address. For
small programs, this second detail isn&apos;t very important, as you&apos;ll mostly be
using labels, and the assembler works out the correct memory location from the
label. For larger programs though, jumping is the only way to move from one
section of the code to another.</Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8" text="jmp">JMP</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="jmp">JMP</Label> is an unconditional jump. Here&apos;s a really simple example to show it in action:</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:copyable" text="lda #$03
jmp there
brk
brk
brk
there:
  sta $0200
">LDA #$03
JMP there
BRK
BRK
BRK
there:
  STA $0200
</Label></FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8" text="jsr/rts">JSR/RTS</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="jsr">JSR</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="rts">RTS</Label> (&quot;jump to subroutine&quot; and &quot;return from subroutine&quot;) are a
dynamic duo that you&apos;ll usually see used together. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="jsr">JSR</Label> is used to jump from
the current location to another part of the code. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="rts">RTS</Label> returns to the previous
position. This is basically like calling a function and returning.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The processor knows where to return to because <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="jsr">JSR</Label> pushes the address minus
one of the next instruction onto the stack before jumping to the given
location. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="rts">RTS</Label> pops this location, adds one to it, and jumps to that location.
An example:</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:copyable" text="jsr init
jsr loop
jsr end

init:
  ldx #$00
  rts

loop:
  inx
  cpx #$05
  bne loop
  rts

end:
  brk
">JSR init
JSR loop
JSR end

init:
  LDX #$00
  RTS

loop:
  INX
  CPX #$05
  BNE loop
  RTS

end:
  BRK
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The first instruction causes execution to jump to the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="init">init</Label> label. This sets
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label>, then returns to the next instruction, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="jsr loop">JSR loop</Label>. This jumps to the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="loop">loop</Label>
label, which increments <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> until it is equal to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$05">$05</Label>. After that we return to
the next instruction, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="jsr end">JSR end</Label>, which jumps to the end of the file. This
illustrates how <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="jsr">JSR</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="rts">RTS</Label> can be used together to create modular code.</FormattedString></Label>
<Label text-wrap="true" font-size="22" font-weight="bold" margin-top="16" margin-bottom="8" text="creating a game">Creating a game</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="now, let&apos;s put all this knowledge to good use, and make a game! we&apos;re going to
be making a really simple version of the classic game &apos;snake&apos;.">Now, let&apos;s put all this knowledge to good use, and make a game! We&apos;re going to
be making a really simple version of the classic game &apos;Snake&apos;.</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="even though this will be a simple version, the code will be substantially larger
than all the previous examples. we will need to keep track of several memory
locations together for the various aspects of the game. we can still do
the necessary bookkeeping throughout the program ourselves, as before, but
on a larger scale that quickly becomes tedious and can also lead to bugs that
are difficult to spot. instead we&apos;ll now let the assembler do some of the
mundane work for us.">Even though this will be a simple version, the code will be substantially larger
than all the previous examples. We will need to keep track of several memory
locations together for the various aspects of the game. We can still do
the necessary bookkeeping throughout the program ourselves, as before, but
on a larger scale that quickly becomes tedious and can also lead to bugs that
are difficult to spot. Instead we&apos;ll now let the assembler do some of the
mundane work for us.</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="in this assembler, we can define descriptive constants (or symbols) that represent
numbers. the rest of the code can then simply use the constants instead of the
literal number, which immediately makes it obvious what we&apos;re dealing with.
you can use letters, digits and underscores in a name.">In this assembler, we can define descriptive constants (or symbols) that represent
numbers. The rest of the code can then simply use the constants instead of the
literal number, which immediately makes it obvious what we&apos;re dealing with.
You can use letters, digits and underscores in a name.</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Here&apos;s an example. Note that immediate operands are still prefixed with a <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="#">#</Label>.</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:copyable" text="  define  sys-random  $fe ; an address
  define  a_dozen    $0c ; a constant

  lda sys-random  ; equivalent to &quot;lda $fe&quot;

  ldx #a_dozen   ; equivalent to &quot;ldx #$0c&quot;
">  define  sysRandom  $fe ; an address
  define  a_dozen    $0c ; a constant

  LDA sysRandom  ; equivalent to &quot;LDA $fe&quot;

  LDX #a_dozen   ; equivalent to &quot;LDX #$0c&quot;
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="the code block below contains the entire source code of the game. i&apos;ll
explain how it works in the following sections.">The code block below contains the entire source code of the game. I&apos;ll
explain how it works in the following sections.</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString><Label text-wrap="true" margin-top="8" margin-bottom="8" href="https://twitter.com/wkjagt" text="willem van der jagt">Willem van der Jagt</Label> made a <Label text-wrap="true" margin-top="8" margin-bottom="8" href="https://gist.github.com/wkjagt/9043907" text="fully annotated gist
of this source code">fully annotated gist
of this source code</Label>, so follow along
with that for more details.</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:copyable:example-snake:height=600" text="; this content will be replaced with the snake example
">; This content will be replaced with the snake example
</Label></FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8" text="overall structure">Overall structure</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="after the initial block of comments (lines starting with semicolons), the first
two lines are:">After the initial block of comments (lines starting with semicolons), the first
two lines are:</Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:readonly" text="jsr init
jsr loop
">jsr init
jsr loop
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="init">init</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="loop">loop</Label> are both subroutines. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="init">init</Label> initializes the game state, and
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="loop">loop</Label> is the main game loop.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="loop">loop</Label> subroutine itself just calls a number of subroutines sequentially,
before looping back on itself:</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:readonly" text="loop:
  jsr readkeys
  jsr check-collision
  jsr update-snake
  jsr draw-apple
  jsr draw-snake
  jsr spinwheels
  jmp loop
">loop:
  jsr readkeys
  jsr checkCollision
  jsr updateSnake
  jsr drawApple
  jsr drawSnake
  jsr spinwheels
  jmp loop
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>First, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="readkeys">readkeys</Label> checks to see if one of the direction keys (W, A, S, D) was
pressed, and if so, sets the direction of the snake accordingly. Then,
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="check-collision">checkCollision</Label> checks to see if the snake collided with itself or the apple.
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="update-snake">updateSnake</Label> updates the internal representation of the snake, based on its
direction. Next, the apple and snake are drawn. Finally, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="spin-wheels">spinWheels</Label> makes the
processor do some busy work, to stop the game from running too quickly. Think
of it like a sleep command. The game keeps running until the snake collides
with the wall or itself.</FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8" text="zero page usage">Zero page usage</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The zero page of memory is used to store a number of game state variables, as
noted in the comment block at the top of the game. Everything in <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$00">$00</Label>, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label>
and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$10">$10</Label> upwards is a pair of bytes representing a two-byte memory location
that will be looked up using indirect addressing.  These memory locations will
all be between <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0200">$0200</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$05ff">$05ff</Label> - the section of memory corresponding to the
game console. For example, if <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$00">$00</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label> contained the values <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label>
and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$02">$02</Label>, they would be referring to the second pixel of the display (
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0201">$0201</Label> - remember, the least significant byte comes first in indirect addressing).</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The first two bytes hold the location of the apple. This is updated every time
the snake eats the apple. Byte <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$02">$02</Label> contains the current direction. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="1">1</Label> means
up, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="2">2</Label> right, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="4">4</Label> down, and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="8">8</Label> left.  The reasoning behind these numbers will
become clear later.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Finally, byte <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$03">$03</Label> contains the current length of the snake, in terms of bytes
in memory (so a length of 4 means 2 pixels).</FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8" text="initialization">Initialization</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="init">init</Label> subroutine defers to two subroutines, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="init-snake">initSnake</Label> and
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="generate-apple-position">generateApplePosition</Label>. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="init-snake">initSnake</Label> sets the snake direction, length, and then
loads the initial memory locations of the snake head and body. The byte pair at
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$10">$10</Label> contains the screen location of the head, the pair at <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$12">$12</Label> contains the
location of the single body segment, and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$14">$14</Label> contains the location of the
tail (the tail is the last segment of the body and is drawn in black to keep
the snake moving). This happens in the following code:</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-6502-assembler:copyable" text="lda #$11
sta $10
lda #$10
sta $12
lda #$0f
sta $14
lda #$04
sta $11
sta $13
sta $15
">lda #$11
sta $10
lda #$10
sta $12
lda #$0f
sta $14
lda #$04
sta $11
sta $13
sta $15
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>This loads the value <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$11">$11</Label> into the memory location <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$10">$10</Label>, the value <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$10">$10</Label> into
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$12">$12</Label>, and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0f">$0f</Label> into <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$14">$14</Label>. It then loads the value <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$04">$04</Label> into <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$11">$11</Label>, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$13">$13</Label>
and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$15">$15</Label>. This leads to memory like this:</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-hex:line-start=0x0010:readonly" text="11 04 10 04 0f 04
">11 04 10 04 0f 04
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>which represents the indirectly-addressed memory locations <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0411">$0411</Label>, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0410">$0410</Label> and
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$040f">$040f</Label> (three pixels in the middle of the display). I&apos;m labouring this point,
but it&apos;s important to fully grok how indirect addressing works.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The next subroutine, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="generate-apple-position">generateApplePosition</Label>, sets the apple location to a
random position on the display. First, it loads a random byte into the
accumulator (<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$fe">$fe</Label> is a random number generator in this simulator). This is
stored into <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$00">$00</Label>. Next, a different random byte is loaded into the
accumulator, which is then <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="and">AND</Label>-ed with the value <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$03">$03</Label>. This part requires a
bit of a detour.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The hex value <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$03">$03</Label> is represented in binary as <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="00000011">00000011</Label>. The <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="and">AND</Label> opcode
performs a bitwise AND of the argument with the accumulator. For example, if
the accumulator contains the binary value <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="10101010">10101010</Label>, then the result of <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="and">AND</Label>
with <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="00000011">00000011</Label> will be <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="00000010">00000010</Label>.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="the effect of this is to mask out the least significant two bits of the
accumulator, setting the others to zero. this converts a number in the range of
0–255 to a number in the range of 0–3.">The effect of this is to mask out the least significant two bits of the
accumulator, setting the others to zero. This converts a number in the range of
0–255 to a number in the range of 0–3.</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>After this, the value <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="2">2</Label> is added to the accumulator, to create a final random
number in the range 2–5.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The result of this subroutine is to load a random byte into <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$00">$00</Label>, and a random
number between 2 and 5 into <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label>. Because the least significant byte comes
first with indirect addressing, this translates into a memory address between
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0200">$0200</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$05ff">$05ff</Label>: the exact range used to draw the display.</FormattedString></Label>
<Label text-wrap="true" font-size="20" font-weight="bold" margin-top="16" margin-bottom="8" text="the game loop">The game loop</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="nearly all games have at their heart a game loop. all game loops have the same
basic form: accept user input, update the game state, and render the game
state. this loop is no different.">Nearly all games have at their heart a game loop. All game loops have the same
basic form: accept user input, update the game state, and render the game
state. This loop is no different.</Label>
<Label text-wrap="true" font-size="18" font-weight="bold" margin-top="14" margin-bottom="8" text="reading the input">Reading the input</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The first subroutine, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="read-keys">readKeys</Label>, takes the job of accepting user input. The
memory location <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$ff">$ff</Label> holds the ascii code of the most recent key press in this
simulator. The value is loaded into the accumulator, then compared to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$77">$77</Label>
(the hex code for W), <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$64">$64</Label> (D), <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$73">$73</Label> (S) and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$61">$61</Label> (A). If any of these
comparisons are successful, the program branches to the appropriate section.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Additional button inputs are also available: button A (Enter/Return key, ASCII code <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0d">$0D</Label>) and
button B (Space key, ASCII code <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$20">$20</Label>). These can be used to add more interaction to your games.
For directional controls, both WASD keys and arrow keys can be used interchangeably.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Each section (<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="up-key">upKey</Label>, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="right-key">rightKey</Label>, etc.) first checks to see if the current
direction is the opposite of the new direction. This requires another little detour.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>As stated before, the four directions are represented internally by the numbers
1, 2, 4 and 8. Each of these numbers is a power of 2, thus they are represented
by a binary number with a single <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="1">1</Label>:</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-:readonly:no-line-numbers" text="1 =&gt; 0001 (up)
2 =&gt; 0010 (right)
4 =&gt; 0100 (down)
8 =&gt; 1000 (left)
">1 =&gt; 0001 (up)
2 =&gt; 0010 (right)
4 =&gt; 0100 (down)
8 =&gt; 1000 (left)
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="bit">BIT</Label> opcode is similar to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="and">AND</Label>, but the calculation is only used to set
the zero flag - the actual result is discarded. The zero flag is set only if the
result of AND-ing the accumulator with argument is zero. When we&apos;re looking at
powers of two, the zero flag will only be set if the two numbers are not the
same. For example, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="0001 and 0001">0001 AND 0001</Label> is not zero, but <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="0001 and 0010">0001 AND 0010</Label> is zero.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>So, looking at <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="up-key">upKey</Label>, if the current direction is down (4), the bit test will
be zero. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="bne">BNE</Label> means &quot;branch if the zero flag is clear&quot;, so in this case we&apos;ll
branch to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="illegal-move">illegalMove</Label>, which just returns from the subroutine. Otherwise, the
new direction (1 in this case) is stored in the appropriate memory location.</FormattedString></Label>
<Label text-wrap="true" font-size="18" font-weight="bold" margin-top="14" margin-bottom="8" text="updating the game state">Updating the game state</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The next subroutine, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="check-collision">checkCollision</Label>, defers to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="check-apple-collision">checkAppleCollision</Label> and
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="check-snake-collision">checkSnakeCollision</Label>. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="check-apple-collision">checkAppleCollision</Label> just checks to see if the two
bytes holding the location of the apple match the two bytes holding the
location of the head. If they do, the length is increased and a new apple
position is generated.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="check-snake-collision">checkSnakeCollision</Label> loops through the snake&apos;s body segments, checking each
byte pair against the head pair. If there is a match, then game over.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="after collision detection, we update the snake&apos;s location. this is done at a
high level like so: first, move each byte pair of the body up one position in
memory. second, update the head according to the current direction. finally, if
the head is out of bounds, handle it as a collision. i&apos;ll illustrate this with
some ascii art. each pair of brackets contains an x,y coordinate rather than a
pair of bytes for simplicity.">After collision detection, we update the snake&apos;s location. This is done at a
high level like so: First, move each byte pair of the body up one position in
memory. Second, update the head according to the current direction. Finally, if
the head is out of bounds, handle it as a collision. I&apos;ll illustrate this with
some ascii art. Each pair of brackets contains an x,y coordinate rather than a
pair of bytes for simplicity.</Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-:readonly:no-line-numbers" text="  0    1    2    3    4
head                 tail

[1,5][1,4][1,3][1,2][2,2]    starting position

[1,5][1,4][1,3][1,2][1,2]    value of (3) is copied into (4)

[1,5][1,4][1,3][1,3][1,2]    value of (2) is copied into (3)

[1,5][1,4][1,4][1,3][1,2]    value of (1) is copied into (2)

[1,5][1,5][1,4][1,3][1,2]    value of (0) is copied into (1)

[0,5][1,5][1,4][1,3][1,2]    value of (0) is updated based on direction
">  0    1    2    3    4
Head                 Tail

[1,5][1,4][1,3][1,2][2,2]    Starting position

[1,5][1,4][1,3][1,2][1,2]    Value of (3) is copied into (4)

[1,5][1,4][1,3][1,3][1,2]    Value of (2) is copied into (3)

[1,5][1,4][1,4][1,3][1,2]    Value of (1) is copied into (2)

[1,5][1,5][1,4][1,3][1,2]    Value of (0) is copied into (1)

[0,5][1,5][1,4][1,3][1,2]    Value of (0) is updated based on direction
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>At a low level, this subroutine is slightly more complex. First, the length is
loaded into the <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> register, which is then decremented. The snippet below
shows the starting memory for the snake.</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-:readonly:no-line-numbers" text="memory location: $10 $11 $12 $13 $14 $15

value:           $11 $04 $10 $04 $0f $04
">Memory location: $10 $11 $12 $13 $14 $15

Value:           $11 $04 $10 $04 $0f $04
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The length is initialized to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="4">4</Label>, so <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> starts off as <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="3">3</Label>. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="lda $10,x">LDA $10,x</Label> loads the
value of <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$13">$13</Label> into <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label>, then <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="sta $12,x">STA $12,x</Label> stores this value into <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$15">$15</Label>. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> is
decremented, and we loop. Now <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> is <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="2">2</Label>, so we load <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$12">$12</Label> and store it into
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$14">$14</Label>. This loops while <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> is positive (<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="bpl">BPL</Label> means &quot;branch if positive&quot;).</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Once the values have been shifted down the snake, we have to work out what to
do with the head. The direction is first loaded into <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label>. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="lsr">LSR</Label> means &quot;logical
shift right&quot;, or &quot;shift all the bits one position to the right&quot;. The least
significant bit is shifted into the carry flag, so if the accumulator is <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="1">1</Label>,
after <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="lsr">LSR</Label> it is <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="0">0</Label>, with the carry flag set.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>To test whether the direction is <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="1">1</Label>, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="2">2</Label>, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="4">4</Label> or <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="8">8</Label>, the code continually
shifts right until the carry is set. One <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="lsr">LSR</Label> means &quot;up&quot;, two means &quot;right&quot;,
and so on.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="the next bit updates the head of the snake depending on the direction. this is
probably the most complicated part of the code, and it&apos;s all reliant on how
memory locations map to the screen, so let&apos;s look at that in more detail.">The next bit updates the head of the snake depending on the direction. This is
probably the most complicated part of the code, and it&apos;s all reliant on how
memory locations map to the screen, so let&apos;s look at that in more detail.</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>You can think of the screen as four horizontal strips of 32 × 8 pixels.
These strips map to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0200-$02ff">$0200-$02ff</Label>, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0300-$03ff">$0300-$03ff</Label>, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0400-$04ff">$0400-$04ff</Label> and <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0500-$05ff">$0500-$05ff</Label>.
The first rows of pixels are <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0200-$021f">$0200-$021f</Label>, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0220-$023f">$0220-$023f</Label>, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0240-$025f">$0240-$025f</Label>, etc.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>As long as you&apos;re moving within one of these horizontal strips, things are
simple. For example, to move right, just increment the least significant byte
(e.g. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0200">$0200</Label> becomes <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0201">$0201</Label>). To go down, add <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$20">$20</Label> (e.g. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0200">$0200</Label> becomes
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0220">$0220</Label>). Left and up are the reverse.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Going between sections is more complicated, as we have to take into account the
most significant byte as well. For example, going down from <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$02e1">$02e1</Label> should lead
to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0301">$0301</Label>. Luckily, this is fairly easy to accomplish. Adding <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$20">$20</Label> to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$e1">$e1</Label>
results in <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$01">$01</Label> and sets the carry bit. If the carry bit was set, we know we
also need to increment the most significant byte.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>After a move in each direction, we also need to check to see if the head
would become out of bounds. This is handled differently for each direction. For
left and right, we can check to see if the head has effectively &quot;wrapped
around&quot;. Going right from <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$021f">$021f</Label> by incrementing the least significant byte
would lead to <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$0220">$0220</Label>, but this is actually jumping from the last pixel of the
first row to the first pixel of the second row. So, every time we move right,
we need to check if the new least significant byte is a multiple of <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$20">$20</Label>. This
is done using a bit check against the mask <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$1f">$1f</Label>. Hopefully the illustration
below will show you how masking out the lowest 5 bits reveals whether a number
is a multiple of <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$20">$20</Label> or not.</FormattedString></Label>
<Label text-wrap="true" font-size="14" background-color="#f0f0f0" padding="8" border-radius="4"><FormattedString><Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" class="language-:readonly:no-line-numbers" text="$20: 0010 0000
$40: 0100 0000
$60: 0110 0000

$1f: 0001 1111
">$20: 0010 0000
$40: 0100 0000
$60: 0110 0000

$1f: 0001 1111
</Label></FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8" text="i won&apos;t explain in depth how each of the directions work, but the above
explanation should give you enough to work it out with a bit of study.">I won&apos;t explain in depth how each of the directions work, but the above
explanation should give you enough to work it out with a bit of study.</Label>
<Label text-wrap="true" font-size="18" font-weight="bold" margin-top="14" margin-bottom="8" text="rendering the game">Rendering the game</Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Because the game state is stored in terms of pixel locations, rendering the
game is very straightforward. The first subroutine, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="draw-apple">drawApple</Label>, is extremely
simple. It sets <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="y">Y</Label> to zero, loads a random colour into the accumulator, then
stores this value into <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="($00),y">($00),y</Label>. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$00">$00</Label> is where the location of the apple is
stored, so <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="($00),y">($00),y</Label> dereferences to this memory location. Read the &quot;Indirect
indexed&quot; section in <Label text-wrap="true" margin-top="8" margin-bottom="8" href="#addressing" text="addressing modes">Addressing modes</Label> for more details.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>Next comes <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="draw-snake">drawSnake</Label>. This is pretty simple too - we first undraw the tail
and then draw the head. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> is set to the length of the snake, so we can index
to the right pixel, and we set <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label> to zero then perform the write using the
indexed indirect addressing mode. Then we reload <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> to index to the head, set
<Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="a">A</Label> to one and store it at <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="($10,x)">($10,x)</Label>. <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="$10">$10</Label> stores the two-byte location of
the head, so this draws a white pixel at the current head position. As only
the head and the tail of the snake move, this is enough to keep the snake
moving.</FormattedString></Label>
<Label text-wrap="true" margin-top="8" margin-bottom="8"><FormattedString>The last subroutine, <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="spin-wheels">spinWheels</Label>, is just there because the game would run too
fast otherwise. All <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="spin-wheels">spinWheels</Label> does is count <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> down from zero until it hits
zero again. The first <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="dex">dex</Label> wraps, making <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="x">X</Label> <Label text-wrap="true" font-family="monospace" background-color="#f0f0f0" text="#$ff">#$ff</Label>.</FormattedString></Label></StackLayout>